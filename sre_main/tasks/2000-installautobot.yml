---
- name: clean source dir if required
  file:
    state: absent
    path: "{{ src_dir }}"
  when: rebuild

- name: Check if venv-dir exists
  stat:
    path: "{{ venv_dir }}"
  register: stat_result_venv

- name: "Building python {{python_version}}"
  block:

  - name: install apt packages for ssl
    shell:
      cmd: |
        apt-get install -y \
        build-essential libffi-dev \
        libncursesw5-dev openssl libssl-dev libsqlite3-dev \
        tk-dev libgdbm-dev libc6-dev libbz2-dev \
        gdb lcov pkg-config \
        libgdbm-compat-dev liblzma-dev \
        libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
        lzma lzma-dev tk-dev uuid-dev zlib1g-dev
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: install rpm packages for ssl
    shell:
      cmd: |
        apt update
        apt-get install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
        exit -1
    when: ansible_distribution == 'CentOS'

  - name: Check if {{ src_dir }} exists
    stat:
      path: "{{ src_dir }}"
    register: src_dir_exists

  - name: extract
    unarchive:
      src: "https://www.python.org/ftp/python/{{python_version}}/Python-{{python_version}}.tgz"
      dest: "{{ src_dir | dirname }}"
      remote_src: true
    when: not src_dir_exists.stat.exists

  - name: build
    shell:
      chdir: "{{ src_dir }}"
      cmd: |
        ./configure --enable-optimizations
        make -j4
        make altinstall
  when: not stat_result_venv.stat.exists

- name: make env
  shell:
    chdir: "{{ venv_dir | dirname }}"
    cmd: "/usr/local/bin/python{{python_version_abbreviated}} -mvenv {{ venv_dir | basename }}"

- name: setup pip packages
  shell:
    chdir: "{{ venv_dir }}"
    cmd: |
      . {{venv_dir}}/bin/activate
      python -mpip install pip --upgrade
      python -mpip install wheel
      python -mpip install sre-bot
